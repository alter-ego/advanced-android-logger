def siteUrl = 'https://github.com/alter-ego/advanced-android-logger'
def gitUrl = 'https://github.com/alter-ego/advanced-android-logger.git'
def artifactGroup = "solutions.alterego"
def artifactName = "advancedandroidlogger"
def artifactVersion = "1.0.8"
def artifactDesc = "This library is meant to offer a wrapper around the standard Android Log.x methods in few distinct flavours."

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.1'
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6"
    }
}

apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 23
        versionCode 7
        versionName artifactVersion
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

uploadArchives {
    repositories.mavenDeployer {
        def deployPath = file(getProperty('aar.deployPath'))
        repository(url: "file://${deployPath.absolutePath}")
        pom.project {
            groupId artifactGroup
            artifactId artifactName
            version artifactVersion
        }
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    dryRun = false

    publications = ['Publication']
    pkg {
        repo = "android"
        name = artifactName
        userOrg = 'alterego-solutions'
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
        issueTrackerUrl = 'https://github.com/alter-ego/advanced-android-logger/issues'

        version {
            name = artifactVersion
            desc = artifactDesc
            released = new Date()
            vcsTag = artifactVersion
        }
    }
}

publishing {
    publications {
        Publication(MavenPublication) {
            artifact("$buildDir/outputs/aar/app-release.aar")
            artifact sourcesJar
            artifact javadocJar
            groupId artifactGroup
            artifactId artifactName
            version artifactVersion
        }
    }
}